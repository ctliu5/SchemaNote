@using SchemaNote.ViewModels;
@model OverviewViewModel

@{
    ViewData["Title"] = "Overview";
    var t = Model.Tables.FirstOrDefault() ?? new Table();
    int i = 0;
}

@section Scripts
    {
    <script>
        Overview = {
            'objName': {
                name_cht: "物件名稱",
                j: @Html.Raw(Json.Serialize(Model.TableNameJson))
            },
            'colName': {
                name_cht: "欄位名稱",
                j: @Html.Raw(Json.Serialize(Model.ColumnNameJson))
            },
            'description': {
                name_cht: "中文名稱",
                j: @Html.Raw(Json.Serialize(Model.DescriptionJson))
            },
            'remark': {
                name_cht: "備註",
                j: @Html.Raw(Json.Serialize(Model.RemarkJson))
            },
        };
        @*
        //效能比較
        (function () {
            function test(func, className) {
                var d = Date.now();
                for (var i = 300; i > 0; i--) {
                    func('TBL', className);
                }
                console.log(func.name + " spend time:" + (Date.now() - d));
            }
            for (var cName in Overview) {
                if (Overview.hasOwnProperty(cName)) {
                    test(Iterator_jQuery, cName);// 4th ot 3nd
                    test(Iterator_js_querySelector, cName);// 3nd or 4th
                    test(Iterator_js_ClassName, cName);// 2rd
                    test(Iterator_js_JsonObj, cName);// 1st
                }
            }
        })();
        *@
        //初始化tooltip功能
        (function () {
            $('[data-toggle="tooltip"]').tooltip();
            var chooseUl = document.getElementById('choose');
            var i = 0;
            for (var cName in Overview) {
                if (++i == 1)
                    CurrentIndex = cName;
                if (Overview.hasOwnProperty(cName)) {
                    var option = document.createElement('option');
                    var textnode = document.createTextNode(Overview[cName].name_cht);
                    option.appendChild(textnode);
                    option.setAttribute("value", cName);
                    option.addEventListener("click", SetIndex);
                    chooseUl.appendChild(option);
                }
            };
            $('.dropdown-toggle').dropdown();
        })();
    </script>
}
<h1>Overview</h1>
@if (TempData["ErrorMessage"] != null)
{
    <h4 class="bg-danger">@Html.Raw(TempData["ErrorMessage"])</h4>
}

<div class="form-inline">
    <div class="form-group">
        <select id="choose" class="form-control"></select>
        <input type="text" class="form-control" onkeyup="Iterator_js_JsonObj((typeof this.value === 'string' ? this.value.trim() : ''), CurrentIndex)" placeholder="Enter key words..." />
    </div>
</div>
<br />
@foreach (var item in Model.Tables)
{
    i++;
    <div class="panel-group accordion" id="@Html.Raw(Common.accordion+i)" role="tablist" aria-multiselectable="true">
        <div class="panel panel-default ">
            <div class="panel-heading" role="tab">
                <span class="panel-title" role="button" data-toggle="collapse" data-parent="#@Html.Raw(Common.accordion+i)" href="#@Html.Raw("collapse"+i)" aria-expanded="false" aria-controls="@Html.Raw("collapse"+i)">
                    <span class="caret"></span>
                    <strong class="objName">
                        @Html.DisplayFor(modelItem => item.NAME)
                    </strong>
                </span>
                <a class="description text-info" asp-action="Details" asp-route-id="@item.OBJECT_ID">
                    @Html.DisplayFor(modelItem => item.MS_Description)
                </a>
                <span class="count" data-toggle="tooltip" data-placement="top" title="@Common.CountTip">
                    @Html.DisplayNameFor(model => t.QTY):<strong class="text-info">@Html.DisplayFor(modelItem => item.QTY)</strong>
                </span>
            </div>
            <div id="@Html.Raw("collapse"+i)" class="panel-body panel-collapse collapse tabDetail" role="tabpanel">
                <table class="tabDetail_left">
                    <tbody>
                        <tr>
                            <td>
                                @Html.DisplayNameFor(model => t.TYPE_NAME)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.TYPE_NAME)
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.DisplayNameFor(model => t.SCHEMA_NAME)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.SCHEMA_NAME)
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.DisplayNameFor(model => t.CREATE_DATE)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.CREATE_DATE)
                            </td>
                        </tr>
                        <tr>
                            <td>
                                @Html.DisplayNameFor(model => t.MODIFY_DATE)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.MODIFY_DATE)
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div class="tabDetail_right">
                    <div>
                        @Html.DisplayNameFor(model => t.REMARK)
                    </div>
                    <div>
                        <a class="remark text-info" asp-action="Details" asp-route-id="@item.OBJECT_ID">
                            @Html.DisplayFor(modelItem => item.REMARK)
                        </a>
                    </div>
                </div>
            </div>
            <table class="table table-bordered table-hover subTable" border="1">
                <partial name="_OverviewColumns" model="item.Columns" view-data="@{new ViewDataDictionary(ViewData){{ "TYPE", item.TYPE }}}" />
                @*  ↓↓↓equal↓↓↓↓
                    @{await Html.RenderPartialAsync("_OverviewColumns", item.Columns);}
                *@
            </table>
        </div>
    </div>
}
